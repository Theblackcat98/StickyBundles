{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Nick/Documents/Coding/Sticky%20Notes/StickyBundles/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\"; // Import useEffect\nimport { Button } from \"@heroui/button\";\nimport { Input, Textarea } from \"@heroui/input\"; // Import Textarea\nimport { Card, CardHeader, CardBody, CardFooter } from \"@heroui/card\";\nimport { Listbox, ListboxItem } from \"@heroui/listbox\";\nimport {\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n} from \"@heroui/react\"; // Import Modal components and hook\nimport solar, {\n  HamburgerMenu,\n  Pulse2,\n  Folder,\n  Document,\n  Magnifer\n} from \"@solar-icons/react\";\n\ntype Note = {\n  id: string;\n  title: string;\n  content: string;\n  folder: string;\n  createdAt: Date;\n};\n\nexport default function StickyNotes() {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedFolder, setSelectedFolder] = useState<string | null>(null); // Track selected folder\n  // const [zoomedNoteId, setZoomedNoteId] = useState<string | null>(null); // Remove old state\n  const { isOpen: isModalOpen, onOpen: openModal, onOpenChange: onModalOpenChange, onClose: closeModal } = useDisclosure(); // Modal state hook, get onClose\n  const [selectedNoteData, setSelectedNoteData] = useState<Note | null>(null); // State for modal data\n  const [editingTitle, setEditingTitle] = useState(\"\"); // State for editing title in modal\n  const [editingContent, setEditingContent] = useState(\"\"); // State for editing content in modal\n  const [notes, setNotes] = useState<Note[]>([]); // Initialize notes as empty, load from localStorage\n  const [folders, setFolders] = useState<string[]>([]); // Initialize folders as empty, load from localStorage\n  const [isInitialLoadComplete, setIsInitialLoadComplete] = useState(false); // Flag to prevent saving initial empty state\n\n  // Load notes and folders from localStorage on initial mount\n  useEffect(() => {\n    try {\n      const storedNotes = localStorage.getItem(\"stickyNotes\");\n      if (storedNotes) {\n        // Parse and convert createdAt back to Date objects\n        const parsedNotes = JSON.parse(storedNotes).map((note: any) => ({\n          ...note,\n          createdAt: new Date(note.createdAt),\n        }));\n        setNotes(parsedNotes);\n      } else {\n        // Set default notes if nothing is stored\n        setNotes([\n          {\n            id: \"1\",\n            title: \"Welcome Note\",\n            content: \"This is your first sticky note! Click me to edit.\",\n            folder: \"General\",\n            createdAt: new Date(),\n          },\n        ]);\n      }\n\n      const storedFolders = localStorage.getItem(\"stickyFolders\");\n      if (storedFolders) {\n        setFolders(JSON.parse(storedFolders));\n      } else {\n        // Set default folders if nothing is stored\n        setFolders([\"General\", \"Work\", \"Personal\"]);\n      }\n    } catch (error) {\n      console.error(\"Failed to load data from localStorage:\", error);\n      // Set defaults in case of error\n       setNotes([\n          {\n            id: \"1\",\n            title: \"Welcome Note\",\n            content: \"This is your first sticky note! Click me to edit.\",\n            folder: \"General\",\n            createdAt: new Date(),\n          },\n        ]);\n       setFolders([\"General\", \"Work\", \"Personal\"]);\n    } finally {\n       setIsInitialLoadComplete(true); // Mark initial load as complete\n    }\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  // Save notes to localStorage whenever they change (after initial load)\n  useEffect(() => {\n    if (isInitialLoadComplete) {\n       try {\n         localStorage.setItem(\"stickyNotes\", JSON.stringify(notes));\n       } catch (error) {\n         console.error(\"Failed to save notes to localStorage:\", error);\n       }\n    }\n  }, [notes, isInitialLoadComplete]);\n\n  // Save folders to localStorage whenever they change (after initial load)\n   useEffect(() => {\n    if (isInitialLoadComplete) {\n       try {\n         localStorage.setItem(\"stickyFolders\", JSON.stringify(folders));\n       } catch (error) {\n         console.error(\"Failed to save folders to localStorage:\", error);\n       }\n    }\n  }, [folders, isInitialLoadComplete]);\n\n\n  // Removed duplicated notes state declaration (lines 117-125 from previous file state)\n\n  // const [folders, setFolders] = useState([\"General\", \"Work\", \"Personal\"]); // Managed by useEffect now\n\n  const filteredNotes = notes.filter(note => { // This will now correctly use the 'notes' state declared earlier (line 41)\n    const matchesSearch = note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                          note.content.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesFolder = selectedFolder ? note.folder === selectedFolder : true; // Filter by folder if selected\n    return matchesSearch && matchesFolder;\n  });\n\n  // Combine \"All Notes\" and existing folders for the Listbox\n  const folderItems = [\n    { key: \"all\", name: \"All Notes\", icon: <Document size={20} /> },\n    ...folders.map(folder => ({ key: folder, name: folder, icon: <Folder size={20} /> }))\n  ];\n\n  // No need for derived zoomedNote variable anymore\n\n  return (\n    <div className=\"flex h-screen bg-default-50\"> {/* Relative positioning no longer needed here */}\n      {/* Drawer */}\n      <div className={`${isDrawerOpen ? \"w-64\" : \"w-0\"} transition-all duration-300 overflow-hidden`}>\n        <div className=\"p-4 h-full border-r border-divider\">\n          <Listbox\n            aria-label=\"Folders\"\n            items={folderItems} // Use the combined items array\n            selectedKeys={selectedFolder ? [selectedFolder] : [\"all\"]} // Control selection state\n            onSelectionChange={(keys) => {\n              const selectedKey = Array.from(keys)[0];\n              setSelectedFolder(selectedKey === \"all\" ? null : String(selectedKey));\n            }}\n          >\n            {(item) => (\n              <ListboxItem\n                key={item.key}\n                startContent={item.icon}\n                // No need for individual onClick or className here, handled by Listbox props\n              >\n                {item.name}\n              </ListboxItem>\n            )}\n          </Listbox>\n          <Button className=\"mt-4\" startContent={<Pulse2 size={20} />}>\n            New Folder\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"p-4 border-b border-divider flex items-center gap-4\">\n          <Button isIconOnly onPress={() => setIsDrawerOpen(!isDrawerOpen)}>\n            <HamburgerMenu size={20} />\n          </Button>\n          <Input\n            placeholder=\"Search notes...\"\n            startContent={<Magnifer size={20} />}\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"max-w-md\"\n          />\n        </header>\n\n        {/* Notes Grid */}\n        <main className=\"flex-1 p-6 overflow-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredNotes.map(note => (\n              <Card\n                key={note.id}\n                isPressable\n                className=\"h-48 cursor-pointer hover:shadow-lg transition-shadow flex flex-col\" // Added flex flex-col\n                onPress={() => {\n                  setSelectedNoteData(note);\n                  setEditingTitle(note.title); // Set editing state when opening\n                  setEditingContent(note.content); // Set editing state when opening\n                  openModal();\n                }}\n              >\n                <CardHeader className=\"font-semibold overflow-hidden text-ellipsis whitespace-nowrap\"> {/* Prevent title overflow */}\n                  {note.title}\n                </CardHeader>\n                <CardBody className=\"text-sm text-default-500 overflow-hidden flex-grow\"> {/* Allow body to grow and hide overflow */}\n                  <p className=\"line-clamp-5\">{note.content}</p> {/* Limit lines shown in card */}\n                </CardBody>\n                <CardFooter className=\"text-xs text-default-400 mt-auto\"> {/* Push footer to bottom */}\n                  {note.createdAt.toLocaleDateString()}\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </main>\n\n        {/* New Note FAB */}\n        <Button\n          isIconOnly\n          color=\"primary\"\n          className=\"fixed bottom-6 right-6\"\n          onPress={() => {\n            setNotes(prev => [...prev, {\n              id: Date.now().toString(),\n              title: \"New Note\",\n              content: \"\",\n              folder: \"General\",\n              createdAt: new Date()\n            }])\n          }}\n        >\n          <Pulse2 size={24} />\n        </Button>\n      </div>\n\n      {/* Zoomed Note Modal using @heroui/react */}\n      <Modal\n        isOpen={isModalOpen}\n        onOpenChange={onModalOpenChange}\n        backdrop=\"blur\"\n        radius=\"lg\"\n        classNames={{ // Using styles from zoomedsticky.tsx example\n          body: \"py-6\",\n          base: \"border-[#292f46] bg-[#19172c] dark:bg-[#19172c] text-[#a8b0d3] max-w-2xl\", // Added max-w-2xl\n          header: \"border-b-[1px] border-[#292f46]\",\n          footer: \"border-t-[1px] border-[#292f46]\",\n          closeButton: \"hover:bg-white/5 active:bg-white/10\",\n        }}\n      >\n        <ModalContent>\n          {(onClose) => {\n            // Handle saving the edited note\n            const handleSaveNote = () => {\n              if (!selectedNoteData) return;\n\n              setNotes(prevNotes =>\n                prevNotes.map(note =>\n                  note.id === selectedNoteData.id\n                    ? { ...note, title: editingTitle, content: editingContent }\n                    : note\n                )\n              );\n              onClose(); // Close the modal after saving\n            };\n\n            return (\n              <>\n                <ModalHeader className=\"flex flex-col gap-1\">\n                  <Input\n                    aria-label=\"Note Title\"\n                    variant=\"underlined\"\n                    placeholder=\"Note Title\"\n                    value={editingTitle}\n                    onChange={(e) => setEditingTitle(e.target.value)}\n                    className=\"text-xl font-bold text-[#a8b0d3]\" // Match modal text color\n                    classNames={{ input: \"text-xl font-bold\" }} // Ensure input text matches header style\n                  />\n                </ModalHeader>\n                <ModalBody>\n                  <Textarea\n                    aria-label=\"Note Content\"\n                    variant=\"faded\" // Use a suitable variant\n                    placeholder=\"Enter your note content...\"\n                    value={editingContent}\n                    onChange={(e) => setEditingContent(e.target.value)}\n                    className=\"min-h-[200px] text-[#a8b0d3]\" // Match modal text color\n                    classNames={{ input: \"resize-y\" }} // Allow vertical resize\n                  />\n                </ModalBody>\n                <ModalFooter className=\"text-sm text-default-400 justify-between\">\n                  <span>\n                    Created: {selectedNoteData?.createdAt.toLocaleDateString()} | Folder: {selectedNoteData?.folder}\n                  </span>\n                  <div> {/* Group buttons */}\n                    <Button color=\"default\" variant=\"light\" onPress={onClose}>\n                      Cancel\n                    </Button>\n                    <Button color=\"primary\" onPress={handleSaveNote} className=\"ml-2\"> {/* Add Save button */}\n                      Save\n                    </Button>\n                  </div>\n                </ModalFooter>\n              </>\n            );\n          }}\n        </ModalContent>\n        {/* Removed duplicated ModalContent and closing tags */}\n      </Modal>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}